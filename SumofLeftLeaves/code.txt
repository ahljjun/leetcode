/*
Find the sum of all left leaves in a given binary tree.

Example:

    3
    / \
   9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
*/

/**
* Definition for a binary tree node.
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
* 
};
*/

//Solution 1
class Solution{
public:
    int sumOfLeftLeaves(TreeNode *root){
        if(!root)
           return 0;

        if(root->left && !root->left->left && root->left->right) // this is a left leaf node
            return root->left->val + sumOfLeftLeaves(root->right);

        return sumOfLeftLeaves(root->left) +  sumOfLeftLeaves(root->right);
    }
};

//Solution 2: tail recursive
class Solution{
public:
    int sumOfLeftLeaves(TreeNode *root){
        int sum = 0;
        sumOfLeftLeaves(root,sum,false);

        return sum;
    }

    void sumOfLeftLeaves_1(TreeNode *root, int &sum, bool isLeft){
        if(!root)
            return ;

        if(root->left || root->right){
            sumOfLeftLeaves_1(root->left, sum, true);
            sumOfLeftLeaves_1(root->right, sum, false);
        }else if(isLeft){ // its left leaf node now.
            sum += root->left->value;
        }
    }
};


